@model IEnumerable<Entities.Entities.MovimentoEstoque>

@{
    ViewBag.Title = "TabelaMovimento";
}

<div class="col-md-12 d-flex justify-content-center align-items-center pt-3">
    <div id="formContainer" class="shadow p-3 bg-white rounded-3 col-md-11 d-flex justify-content-between align-items-center flex-wrap">
        <div class="col-md-3 d-flex flex-column mt- justify-content-center">
            <label for="initDate" class="">Mês Inicial</label>
            <input type="month" id="initDate" class="rounded opacity-50 w-100 w-md-auto text-center">
        </div>
        <div class="col-md-3 d-flex flex-column  justify-content-center">
            <label for="fimDate">Mês Final</label>
            <input type="month" id="fimDate" class="rounded opacity-50 w-100 w-md-auto text-center">
        </div>
        <div class="col-md-3 d-flex mt-4 flex-column justify-content-center">
            <select id="tipoMov" class="form-select w-100 w-md-auto text-center p-0">
                <option>Entrada</option>
                <option>Saída</option>
            </select>
        </div>
        <div class="mt-4 col-md-3 d-flex flex-column justify-content-center">
            <button id="Atualiza" style="width:78%" class="btn btn-primary w-md-auto align-items-center">Pesquisar</button>
        </div>
    </div>
</div>
<div class="col-md-12 text-center pt-4">
    <div class="input-group position-relative">
        <input id="searchInput" type="text" name="name" class="form-control rounded border-1 w-100 w-md-auto" placeholder="Pesquise o produto..." style="padding-left: 40px;" />
        <span class="input-group-text position-absolute" style="left: 1px; top: 50%; transform: translateY(-50%); background: transparent; border: none;">
            <i class="fa-solid fa-magnifying-glass" style="color: #aaa; margin-right: 20px;"></i>
        </span>
    </div>

    <table class="table col-md-12  w-100" id="Tabela">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Produto.NomeProduto)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Quantidade)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DataMovimentacao)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ValorUnitario)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Fornecedor.NomeFornecedor)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.tipomovimentacao.Descricao)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Produto.NomeProduto)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Quantidade)
                    </td>
                    <td>
                        @item.DataMovimentacao.ToString("dd/MM/yyyy")
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ValorUnitario)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Fornecedor.NomeFornecedor)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.tipomovimentacao.Descricao)
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg ">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Chegada de Produtos</h5>
            </div>
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="edit" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg ">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Saida de Produtos</h5>
            </div>
            <div class="modal-body">

            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
                document.getElementById('searchInput').addEventListener('keydown', function (event) {
            // Verifica se a tecla pressionada é "Enter"
            if (event.key === 'Enter') {
                var Teclado = document.getElementById('searchInput').value;
                console.log(Teclado);

                $.ajax({
                       url:'@Url.Action("ProcurarProdutoPorNome", "Movimento")',
                    type: 'GET',
                    data: {
                        pesquisa: Teclado
                    },
                    success: function (response) {
                        if (!response.products || response.products.length === 0) {
                            alert('Nenhum produto encontrado para as datas selecionadas.');
                            return;
                        } else {
                            var tableBody = $('table tbody');
                            tableBody.empty();
                        }

                       // Limpa o corpo da tabela

                        // Verifica se há produtos na resposta

                        // Preenche a tabela com os produtos retornados
                        response.products.forEach(function (item) {
                            var dataMovimentacao = new Date(parseInt(item.DataMovimentacao.substr(6))).toLocaleDateString();

                            var row = '<tr>' +
                                '<td>' + item.Produto.NomeProduto + '</td>' +
                                '<td>' + item.Quantidade + '</td>' +
                                '<td>' + dataMovimentacao + '</td>' +
                                '<td>' + (item.ValorUnitario !== null && item.ValorUnitario !== undefined ? item.ValorUnitario : '') + '</td>' +
                                '<td>' + item.Fornecedor.NomeFornecedor + '</td>' +
                                '<td>' + item.tipomovimentacao.Descricao + '</td>' +
                                '</tr>';
                            tableBody.append(row);
                        });
                    },
                    error: function () {
                        alert('Erro ao buscar os dados. Tente novamente.');
                    }
                });
            }
        });
        // Evento para atualizar a tabela baseado na data e tipo de movimentação
        document.getElementById('Atualiza').addEventListener('click', function () {
            var initDate = document.getElementById('initDate').value;
            var fimDate = document.getElementById('fimDate').value;
            var tipoMov = document.getElementById('tipoMov').value;

            if (initDate && fimDate) {
                $.ajax({
                    url: '@Url.Action("ListarEstoque_DatasEntradas_saidaTabelaMov", "Movimento")',
                    type: 'GET',
                    data: { tipo: tipoMov, init: initDate, fim: fimDate },
                    success: function (response) {
                        var tableBody = $('table tbody');
                        tableBody.empty(); // Limpa o corpo da tabela

                        // Verifica se há produtos na resposta
                        if (!response.products || response.products.length === 0) {
                            alert('Nenhum produto encontrado para as datas selecionadas.');
                            return;
                        }

                        // Preenche a tabela com os produtos retornados
                        response.products.forEach(function (item) {
                            var dataMovimentacao = new Date(parseInt(item.DataMovimentacao.substr(6))).toLocaleDateString();

                            var row = '<tr>' +
                                '<td>' + item.Produto.NomeProduto + '</td>' +
                                '<td>' + item.Quantidade + '</td>' +
                                '<td>' + dataMovimentacao + '</td>' +
                                '<td>' + (item.ValorUnitario !== null && item.ValorUnitario !== undefined ? item.ValorUnitario : '') + '</td>' +
                                '<td>' + item.Fornecedor.NomeFornecedor + '</td>' +
                                '<td>' + item.tipomovimentacao.Descricao + '</td>' +
                                '</tr>';
                            tableBody.append(row);
                        });
                    },
                    error: function () {
                        alert('Erro ao buscar os dados. Tente novamente.');
                    }
                });
            }
        });

        // Evento para abrir o modal de edição com o conteúdo carregado via AJAX
        var editModal = document.getElementById('editModal');
        editModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var url = button.getAttribute('data-url'); // URL do formulário

            var modalBody = editModal.querySelector('.modal-body');

            // Carrega o conteúdo do formulário via AJAX
            fetch(url)
                .then(response => response.text())
                .then(html => {
                    modalBody.innerHTML = html;

                    // Após carregar o conteúdo no modal, associa o evento ao campo
                    var pressed = modalBody.querySelector('#Convertendovirgula');
                    if (pressed) {
                        pressed.addEventListener('input', function (evt) {
                            var valor = pressed.value;
                            // Substitui o ponto por vírgula
                            pressed.value = valor.replace('.', ',');
                        });
                    }
                });
        });

        var edit = document.getElementById('edit');
        edit.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var url = button.getAttribute('data-url'); // URL do formulário

            var modalBody = edit.querySelector('.modal-body');

            fetch(url)
                .then(response => response.text())
                .then(html => {
                    modalBody.innerHTML = html;
                });
        });
</script>

